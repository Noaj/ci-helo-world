# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

jobs:
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - run: |
          aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text >> last_deploy.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - last_deploy.txt
                  
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: |
          aws cloudformation deploy \
            --template-file hello-world-stack/bucket.yml \
            --stack-name "${CIRCLE_WORKFLOW_ID}" \
            --parameter-overrides NAME="${CIRCLE_WORKFLOW_ID}"
      - run: aws s3 sync . s3://"${CIRCLE_WORKFLOW_ID}" --delete

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: |
          aws cloudformation deploy \
            --template-file hello-world-stack/cloudformation.yml \
            --stack-name cloudfront \
            --parameter-overrides PipelineID="${CIRCLE_WORKFLOW_ID}"

  clean_up_old_front_end:
    docker:
      -image: amazon/aws-cli
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Cleaning up old s3
          command: aws s3 rm "s3://$(cat last_deploy.txt)" --recursive
      - run:
          name: Cleaning old prod
          command: aws cloudformation delete-stack --stack-name "$(cat last_deploy.txt)"


  update_deploy_variable:
    docker:
       - image: amazon/aws-cli
    steps:
      - run:
          name: Remove last_deploy.txt
          command: |
            rm -f last_deploy.txt
      - run:
          name: Update last_deploy.txt
          command: |
            echo "${CIRCLE_WORKFLOW_ID}" >> last_deploy.txt      

  workflows:
    default:
      jobs:
        - get_last_deployment_id
        - create_and_deploy_front_end:
            requires: [get_last_deployment_id]
        - promote_to_production:
            requires: [create_and_deploy_front_end]
        - clean_up_old_front_end:
            requires: [promote_to_production] 
        - update_deploy_variable:
            requires: [clean_up_old_front_end]       

# defaults: &defaults
#   docker:
#     - image: python:3.7-alpine3.11
#     # - image: amazon/aws-cli

# commands:
#   destroy_environment:
#     description: Destroy destroy environment if something went wrong
#     steps:
#       - run:
#           name: Destrying environment
#           command: |
#             aws cloudformation delete-stack --stack-name udacity-${CIRCLE_WORKFLOW_ID}
#           when: on_fail  

# jobs:
#   create_infrastructure:
#     docker:
#       - image: amazon/aws-cli
#     working_directory: hello-world-stack
#     steps:
#       - checkout
#       - run:
#           name: print current dir
#           command: ls hello-world-stack
#       - run:
#           name: Create infastructure stack
#           command: |
#             hello-world-stack/create.sh udacity-${CIRCLE_WORKFLOW_ID} \
#             hello-world-stack/create-ec2.yaml \
#             hello-world-stack/create-ec2-parameters.json
#       - destroy_environment      

#   configure_infrastructure:
#     <<: *defaults
#     steps:
#       - checkout
#       - add_ssh_keys:
#           fingerprints: ["aa:ba:25:18:db:4f:52:b8:c8:79:42:70:60:74:4a:29"]
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --update ansible
#       - run:
#           name: Install aws-cli
#           command: pip install awscli      
#       - run:
#           name: Check for aws version
#           command: aws --version
#       - run:
#           name: print s3 buckets
#           command: aws s3 ls    
#       # I nned to fix this :|    
#       # - run:
#       #     name: Configure Server
#       #     command: |
#       #       ansible-playbook -i hello-world-playbook/inventory.txt hello-world-playbook/playbook.yml

#   smoke_test:
#     docker:
#         - image: alpine:latest
#     steps:
#       - checkout
#       - run:
#           name: Add curl
#           command: |
#             apk add --update curl
#       - run:
#           name: Smoke test the site - its reachable
#           command: return 1
            
             
# # Orchestrate or schedule a set of jobs
# workflows:
#   default:
#     jobs:
#       - create_infrastructure
#       - configure_infrastructure:
#           requires: [create_infrastructure]
#       - smoke_test:
#           requires: [configure_infrastructure]

